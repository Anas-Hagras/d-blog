name: Extract Social Media Content

on:
  pull_request:
    types: [closed]
    branches:
      - master
      - main
    paths:
      - "_pages/**/*.md"

# This workflow only processes new pages that were added in the PR
# It does not process modified or deleted pages

jobs:
  extract-content:
    # Only run if the PR was merged (not just closed)
    if: github.event.pull_request.merged == true

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2 # Need at least 2 commits to detect changes
          token: ${{ secrets.GH_PAT }} # Use PAT for checkout to get write permissions

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.GH_PAT }}" | gh auth login --with-token

      - name: Detect new pages
        id: detect
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          python scripts/detect_new_pages.py --pr-mode

      - name: Generate branch name
        id: branch
        run: |
          # Process the first new page to generate branch name
          if [ -n "${{ steps.detect.outputs.new_pages }}" ]; then
            IFS=',' read -ra PAGES <<< "${{ steps.detect.outputs.new_pages }}"
            # Get the first page
            PAGE="${PAGES[0]}"
            
            # Extract page name from path
            # Remove _pages/ prefix and .md suffix
            PAGE_NAME=$(basename "$PAGE" .md)
            # If page name has date prefix (YYYY-MM-DD-), remove it
            PAGE_NAME=$(echo "$PAGE_NAME" | sed -E 's/^[0-9]{4}-[0-9]{2}-[0-9]{2}-//')
            
            # Create branch name in the format {page_name}_social_media
            BRANCH_NAME="${PAGE_NAME}_social_media"
            
            echo "Using page: $PAGE -> Branch: $BRANCH_NAME"
            echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          else
            # Fallback to old format if no pages detected
            BRANCH_NAME="social-media-content-$(date +'%Y%m%d%H%M%S')"
            echo "No pages detected, using fallback branch name: $BRANCH_NAME"
            echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          fi

      - name: Create new branch
        if: steps.detect.outputs.new_pages != ''
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          # Set up authentication for all git operations
          git config --global url."https://${{ secrets.GH_PAT }}@github.com/".insteadOf "https://github.com/"
          git checkout -b ${{ steps.branch.outputs.branch_name }}

      - name: Extract social media content
        if: steps.detect.outputs.new_pages != ''
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Check if OPENAI_API_KEY is set
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "Error: OPENAI_API_KEY is not set"
            exit 1
          fi

          # Process each new page
          IFS=',' read -ra PAGES <<< "${{ steps.detect.outputs.new_pages }}"
          for page in "${PAGES[@]}"; do
            echo "Processing page: $page"
            python scripts/extract_social_media_content.py "$page" "X"
          done

      - name: Check for changes
        id: check_changes
        if: steps.detect.outputs.new_pages != ''
        run: |
          git add Social_media/
          # Check if there are any changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit changes
        if: steps.detect.outputs.new_pages != '' && steps.check_changes.outputs.has_changes == 'true'
        run: |
          git commit -m "Add social media content for new pages"

      - name: Push branch
        if: steps.detect.outputs.new_pages != '' && steps.check_changes.outputs.has_changes == 'true'
        run: |
          # Use a different approach for authentication
          git config --global url."https://${{ secrets.GH_PAT }}@github.com/".insteadOf "https://github.com/"
          git push origin ${{ steps.branch.outputs.branch_name }}

      - name: Create Pull Request
        if: steps.detect.outputs.new_pages != '' && steps.check_changes.outputs.has_changes == 'true'
        run: |
          # Create pull request using GitHub CLI instead of the action
          # This avoids the issue with the action trying to push the branch again
          gh pr create \
            --title "Add social media content for new pages" \
            --body "This PR adds social media content for the following new pages:

            ${{ steps.detect.outputs.new_pages }}

            The content will be published to social media platforms when this PR is merged." \
            --base ${{ github.ref_name }} \
            --head ${{ steps.branch.outputs.branch_name }}
