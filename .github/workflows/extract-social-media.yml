name: Extract Social Media Content

on:
  pull_request:
    branches:
      - main
      - master
    paths:
      - "_pages/**/*.md"
  push:
    branches:
      - main
      - master
    paths:
      - "_pages/**/*.md"
      - "social_media/**"

jobs:
  extract-content:
    # Skip if it's a revert commit
    if: ${{ !startsWith(github.event.head_commit.message, 'Revert ') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2 # Fetch the last 2 commits to detect changes

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Detect new pages
        id: detect
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For PR events, use the detect_new_pages.py script with PR mode
            # Set up GitHub token for the script to use
            export GITHUB_TOKEN="${{ secrets.GH_PAT }}"
            
            # Set PR_NUMBER as an environment variable
            export PR_NUMBER="${{ github.event.pull_request.number }}"
            echo "Using PR #$PR_NUMBER"
            
            # Run the script in PR mode
            python scripts/detect_new_pages.py --pr-mode
            
            # Capture the output for new pages
            NEW_PAGES=$(python scripts/detect_new_pages.py --pr-mode | grep "^_pages/.*\.md$" || echo "")
          else
            # For push events, use the detect_new_pages.py script with commit range
            # Get the before and after commit SHAs
            BEFORE_SHA="${{ github.event.before }}"
            AFTER_SHA="${{ github.event.after }}"
            echo "Comparing commits $BEFORE_SHA and $AFTER_SHA"
            
            # Run the script with commit range
            python scripts/detect_new_pages.py "$BEFORE_SHA" "$AFTER_SHA"
            
            # Capture the output for new pages
            NEW_PAGES=$(python scripts/detect_new_pages.py "$BEFORE_SHA" "$AFTER_SHA" | grep "^_pages/.*\.md$" || echo "")
          fi

          # Output the new pages
          if [ -n "$NEW_PAGES" ]; then
            echo "Found new pages:"
            echo "$NEW_PAGES"
          else
            echo "No new pages detected"
          fi

          # Set the output variable
          echo "new_pages<<EOF" >> $GITHUB_OUTPUT
          echo "$NEW_PAGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Extract social media content for new pages
        if: steps.detect.outputs.new_pages != ''
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Process each new page
          echo "${{ steps.detect.outputs.new_pages }}" | while read page; do
            if [ -n "$page" ]; then
              echo "Processing page: $page"
              python scripts/extract_social_media_content.py "$page"
            fi
          done

      - name: Check for changes
        id: check_changes
        run: |
          git add social_media/
          if git diff --staged --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected in social_media directory"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected in social_media directory"
          fi

      - name: Create branch
        if: steps.detect.outputs.new_pages != '' && steps.check_changes.outputs.has_changes == 'true'
        id: branch
        run: |
          # Get the first file from new pages
          FIRST_PAGE=$(echo "${{ steps.detect.outputs.new_pages }}" | head -n 1)

          # Extract page name from the file path
          PAGE_NAME=$(basename "$FIRST_PAGE" .md)

          # Remove date prefix if it exists (YYYY-MM-DD-)
          if [[ $PAGE_NAME =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}- ]]; then
            PAGE_NAME=${PAGE_NAME:11}
          fi

          # Create a new branch for the extracted content with _social_media suffix
          BRANCH_NAME="${PAGE_NAME}_social_media"
          git checkout -b $BRANCH_NAME
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Commit changes
        if: steps.detect.outputs.new_pages != '' && steps.check_changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -m "Add social media content for new pages"

      - name: Push branch
        if: steps.detect.outputs.new_pages != '' && steps.check_changes.outputs.has_changes == 'true'
        run: |
          # Use a different approach for authentication
          git config --global url."https://${{ secrets.GH_PAT }}@github.com/".insteadOf "https://github.com/"
          git push origin ${{ steps.branch.outputs.branch_name }}

      - name: Create Pull Request
        if: steps.detect.outputs.new_pages != '' && steps.check_changes.outputs.has_changes == 'true'
        run: |
          # Create pull request using GitHub REST API
          PR_BODY="This PR adds social media content for the following new pages:

          ${{ steps.detect.outputs.new_pages }}

          The content will be published to social media platforms when this PR is merged."

          # Create the PR using curl
          curl -X POST \
            -H "Authorization: token ${{ secrets.GH_PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d '{
              "title": "Add social media content for new pages",
              "body": "'"${PR_BODY//$'\n'/\\n}"'",
              "head": "${{ steps.branch.outputs.branch_name }}",
              "base": "${{ github.ref_name }}"
            }'
